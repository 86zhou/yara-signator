package main;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.codec.DecoderException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import controller.Controller;
import converters.ngrams.Ngram;
import postgres.PostgresRequestUtils;
import ranking_system.RankingSystemFacade;
import smtx_handler.Instruction;
import yara.Rule;
import yara.RuleCondition;
import yara.RuleMeta;
import yara.RuleStrings;
import yara.YaraRule;

public class YaraRuleGenerator implements Runnable {

	private static final Logger logger = LoggerFactory.getLogger(YaraRuleGenerator.class);
	
	private String family;
	private int family_id;
	private Config config;
	private DateTimeFormatter dtf;
	private LocalDateTime now;
	private int counter;
	private int familiesSize;

	public YaraRuleGenerator(String family, int family_id, Config config, final DateTimeFormatter dtf, LocalDateTime now, int counter, int familiesSize) {
		this.family = family;
		this.family_id = family_id;
		this.config = config;
		this.dtf = dtf;
		this.now = now;
		this.counter = counter;
		this.familiesSize = familiesSize;
	}
	
	
	private void generateRule(String family, int family_id, Config config, final DateTimeFormatter dtf, LocalDateTime now) {
		Controller controller = new Controller();
		List<Ngram> ngrams = new ArrayList<>();
		try {
			ngrams = new PostgresRequestUtils().getUniqueNgramsForFamily(family_id, config);
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (DecoderException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		if(ngrams.isEmpty()) {
			logger.info("Empty at: " + family + " - no folder created.");
			//emptyFamilies.add(family);
			return;
		}
		
		//System.out.println(ngrams.size() + " " + ngrams.get(0).toString() );
		//GsonBuilder gsonBuilder = new GsonBuilder();
	    //Gson gson = gsonBuilder.create();
		//String jsonNgram = gson.toJson(ngrams.get(0), Ngram.class);
		//System.out.println(jsonNgram);
		
		RankingSystemFacade ranker = new RankingSystemFacade();
		logger.info(family + " - running the ranking system now");
		ngrams = ranker.rankingAction(ngrams, config);
		
		/*
		 * Step 6
		 * Create YARA-Signatures
		 */
		
		YaraRule yararule = controller.create();
		
		//Import imp = new Import();
		//imp.addImport("pe");
		yararule.setImports(null);
		
		Rule rule = new Rule();
		rule.name = family.replace('.', '_');
		
		RuleMeta rulemeta = new RuleMeta();
		rulemeta.setAuthor("Felix Bilstein - yara-signator at cocacoding dot com");
		rulemeta.setDate(DateTimeFormatter.ofPattern("yyyy-MM-dd").format(now));
		rulemeta.setDescription("autogenerated rule brought to you by yara-signator");
		rulemeta.setTool("yara-signator 0.1a");
		rulemeta.setVersion("1");
		rulemeta.setMalpedia_ref("https://malpedia.caad.fkie.fraunhofer.de/details/" + rule.name.replace('.', '_').replaceFirst("_", "."));
		//TODO: get the date from malpedia git repo provided in the config file.
		rulemeta.setMalpedia_version("20190204");
		rulemeta.setMalpedia_license("CC BY-NC-SA 4.0");
		rulemeta.setMalpedia_sharing("TLP:WHITE");
		rule.setMeta(rulemeta);
		
		RuleStrings rulestrings = new RuleStrings();
		int sequence_counter = 0;
		for(Ngram ngram : ngrams) {
			StringBuilder sb = new StringBuilder();
			sb.append("        $sequence_" + sequence_counter + " = { ");
			for(Instruction instr : ngram.getNgramInstructions()) {
				sb.append(instr.getOpcodes() + " ");
			}
			sb.append("}");
			if(config.scoreCommentEnabled) sb.append("\n            // n = " + ngram.n);
			if(config.scoreCommentEnabled) sb.append(", score = " + ngram.score);
			if(config.scoreCommentEnabled) {
				for(Instruction instr : ngram.getNgramInstructions()) {
					sb.append("\n            // ");
					if(instr.getMnemonics().get(0).length() < 18 && instr.getAssemblySize()*2 < 18) {
						sb.append("  " + instr.getOpcodes() + (new String(new char[20-(instr.getAssemblySize()*2)]).replace('\0', ' ') ) +  " | " 
							+ instr.getMnemonics().get(0)  + (new String(new char[20-(instr.getMnemonics().get(0).length())]).replace('\0', ' ') ) + instr.getMnemonics().get(1));
					} else {
						sb.append("  " + instr.getOpcodes() + (new String(new char[4]).replace('\0', ' ') ) +  " | " 
							+ instr.getMnemonics().get(0)  + (new String(new char[4]).replace('\0', ' ') ) + instr.getMnemonics().get(1));
					}
				}
				sb.append("\n");
			}
			rulestrings.addString(sb.toString());
			sequence_counter++;
		}
		rule.setStrings(rulestrings);
		
		RuleCondition rulecondition = new RuleCondition();
		rulecondition.setCondition("        7 of them");
		rule.setCondition(rulecondition);
		
		yararule.setRule(rule);
		//System.out.println("\n\n");
		//System.out.println(yararule.toString());
		//System.out.println("\n");
		
		
		String output = config.output_path + "/" + dtf.format(now) + "/" + family + "/yara/tlp_white/" + family + "_auto.yar";
		
		File outputFile = new File(output);
		File parentFolder = outputFile.getParentFile();
		if (!parentFolder.exists() && !parentFolder.mkdirs()) {
		    throw new IllegalStateException("Unable to create folder: " + parentFolder);
		}
		try {
			FileWriter fw = new FileWriter(outputFile);
			fw.write(yararule.toString());
			fw.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		outputFile = null;
		parentFolder = null;
		ngrams = null;
		
		String progress = config.output_path + "/" + dtf.format(now) + "/" + family + "/yara/tlp_white/" + family + "_auto.yar";
		logger.info(counter + "/" + this.familiesSize + " Writing yara-rules to: " + progress);

	}
	
	@Override
	public void run() {
		generateRule(this.family, this.family_id, this.config, this.dtf, this.now);
	}

}
